# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


function createUser_read(handler)
    function createUser_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        openapi_params["User"] = OpenAPI.Servers.to_param_type(User, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function createUser_validate(handler)
    function createUser_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function createUser_invoke(impl; post_invoke=nothing)
    function createUser_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = try
            impl.createUser(req::HTTP.Request, openapi_params["User"];)
        catch ex
            @error("Error in createUser", exception=(ex, catch_backtrace()))
            HTTP.Response(500, "Internal Server Error")
        end
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function createUsersWithArrayInput_read(handler)
    function createUsersWithArrayInput_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        openapi_params["User"] = OpenAPI.Servers.to_param_type(Vector{User}, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function createUsersWithArrayInput_validate(handler)
    function createUsersWithArrayInput_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function createUsersWithArrayInput_invoke(impl; post_invoke=nothing)
    function createUsersWithArrayInput_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = try
            impl.createUsersWithArrayInput(req::HTTP.Request, openapi_params["User"];)
        catch ex
            @error("Error in createUsersWithArrayInput", exception=(ex, catch_backtrace()))
            HTTP.Response(500, "Internal Server Error")
        end
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function createUsersWithListInput_read(handler)
    function createUsersWithListInput_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        openapi_params["User"] = OpenAPI.Servers.to_param_type(Vector{User}, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function createUsersWithListInput_validate(handler)
    function createUsersWithListInput_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function createUsersWithListInput_invoke(impl; post_invoke=nothing)
    function createUsersWithListInput_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = try
            impl.createUsersWithListInput(req::HTTP.Request, openapi_params["User"];)
        catch ex
            @error("Error in createUsersWithListInput", exception=(ex, catch_backtrace()))
            HTTP.Response(500, "Internal Server Error")
        end
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function deleteUser_read(handler)
    function deleteUser_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["username"] = OpenAPI.Servers.to_param(String, path_params, "username", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function deleteUser_validate(handler)
    function deleteUser_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function deleteUser_invoke(impl; post_invoke=nothing)
    function deleteUser_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = try
            impl.deleteUser(req::HTTP.Request, openapi_params["username"];)
        catch ex
            @error("Error in deleteUser", exception=(ex, catch_backtrace()))
            HTTP.Response(500, "Internal Server Error")
        end
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function getUserByName_read(handler)
    function getUserByName_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["username"] = OpenAPI.Servers.to_param(String, path_params, "username", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function getUserByName_validate(handler)
    function getUserByName_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function getUserByName_invoke(impl; post_invoke=nothing)
    function getUserByName_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = try
            impl.getUserByName(req::HTTP.Request, openapi_params["username"];)
        catch ex
            @error("Error in getUserByName", exception=(ex, catch_backtrace()))
            HTTP.Response(500, "Internal Server Error")
        end
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function loginUser_read(handler)
    function loginUser_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["username"] = OpenAPI.Servers.to_param(String, query_params, "username", required=true, )
        openapi_params["password"] = OpenAPI.Servers.to_param(String, query_params, "password", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function loginUser_validate(handler)
    function loginUser_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function loginUser_invoke(impl; post_invoke=nothing)
    function loginUser_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = try
            impl.loginUser(req::HTTP.Request, openapi_params["username"], openapi_params["password"];)
        catch ex
            @error("Error in loginUser", exception=(ex, catch_backtrace()))
            HTTP.Response(500, "Internal Server Error")
        end
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function logoutUser_read(handler)
    function logoutUser_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function logoutUser_validate(handler)
    function logoutUser_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function logoutUser_invoke(impl; post_invoke=nothing)
    function logoutUser_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = try
            impl.logoutUser(req::HTTP.Request;)
        catch ex
            @error("Error in logoutUser", exception=(ex, catch_backtrace()))
            HTTP.Response(500, "Internal Server Error")
        end
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function updateUser_read(handler)
    function updateUser_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["username"] = OpenAPI.Servers.to_param(String, path_params, "username", required=true, )
        openapi_params["User"] = OpenAPI.Servers.to_param_type(User, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function updateUser_validate(handler)
    function updateUser_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function updateUser_invoke(impl; post_invoke=nothing)
    function updateUser_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = try
            impl.updateUser(req::HTTP.Request, openapi_params["username"], openapi_params["User"];)
        catch ex
            @error("Error in updateUser", exception=(ex, catch_backtrace()))
            HTTP.Response(500, "Internal Server Error")
        end
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end


function registerUserApi(router::HTTP.Router, impl; path_prefix::String="", optional_middlewares...)
    HTTP.register!(router, "POST", path_prefix * "/user", OpenAPI.Servers.middleware(impl, createUser_read, createUser_validate, createUser_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/user/createWithArray", OpenAPI.Servers.middleware(impl, createUsersWithArrayInput_read, createUsersWithArrayInput_validate, createUsersWithArrayInput_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/user/createWithList", OpenAPI.Servers.middleware(impl, createUsersWithListInput_read, createUsersWithListInput_validate, createUsersWithListInput_invoke; optional_middlewares...))
    HTTP.register!(router, "DELETE", path_prefix * "/user/{username}", OpenAPI.Servers.middleware(impl, deleteUser_read, deleteUser_validate, deleteUser_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/user/{username}", OpenAPI.Servers.middleware(impl, getUserByName_read, getUserByName_validate, getUserByName_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/user/login", OpenAPI.Servers.middleware(impl, loginUser_read, loginUser_validate, loginUser_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/user/logout", OpenAPI.Servers.middleware(impl, logoutUser_read, logoutUser_validate, logoutUser_invoke; optional_middlewares...))
    HTTP.register!(router, "PUT", path_prefix * "/user/{username}", OpenAPI.Servers.middleware(impl, updateUser_read, updateUser_validate, updateUser_invoke; optional_middlewares...))
    return router
end
