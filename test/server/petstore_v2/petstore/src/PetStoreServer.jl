# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""
Encapsulates generated server code for PetStoreServer

The following server methods must be implemented:

- **addPet**
    - *invocation:* POST /pet
    - *signature:* addPet(req::HTTP.Request, in\_body::Pet;) -> Nothing
- **deletePet**
    - *invocation:* DELETE /pet/{petId}
    - *signature:* deletePet(req::HTTP.Request, in\_petId::Int64; in\_api_key=nothing,) -> Nothing
- **findPetsByStatus**
    - *invocation:* GET /pet/findByStatus
    - *signature:* findPetsByStatus(req::HTTP.Request, in\_status::Vector{String};) -> Vector{Pet}
- **findPetsByTags**
    - *invocation:* GET /pet/findByTags
    - *signature:* findPetsByTags(req::HTTP.Request, in\_tags::Vector{String};) -> Vector{Pet}
- **getPetById**
    - *invocation:* GET /pet/{petId}
    - *signature:* getPetById(req::HTTP.Request, in\_petId::Int64;) -> Pet
- **updatePet**
    - *invocation:* PUT /pet
    - *signature:* updatePet(req::HTTP.Request, in\_body::Pet;) -> Nothing
- **updatePetWithForm**
    - *invocation:* POST /pet/{petId}
    - *signature:* updatePetWithForm(req::HTTP.Request, in\_petId::Int64; in\_name=nothing, in\_status=nothing,) -> Nothing
- **uploadFile**
    - *invocation:* POST /pet/{petId}/uploadImage
    - *signature:* uploadFile(req::HTTP.Request, in\_petId::Int64; in\_additionalMetadata=nothing, in\_file=nothing,) -> ApiResponse
- **deleteOrder**
    - *invocation:* DELETE /store/order/{orderId}
    - *signature:* deleteOrder(req::HTTP.Request, in\_orderId::Int64;) -> Nothing
- **getInventory**
    - *invocation:* GET /store/inventory
    - *signature:* getInventory(req::HTTP.Request;) -> Dict{String, Int64}
- **getOrderById**
    - *invocation:* GET /store/order/{orderId}
    - *signature:* getOrderById(req::HTTP.Request, in\_orderId::Int64;) -> Order
- **placeOrder**
    - *invocation:* POST /store/order
    - *signature:* placeOrder(req::HTTP.Request, in\_body::Order;) -> Order
- **createUser**
    - *invocation:* POST /user
    - *signature:* createUser(req::HTTP.Request, in\_body::User;) -> Nothing
- **createUsersWithArrayInput**
    - *invocation:* POST /user/createWithArray
    - *signature:* createUsersWithArrayInput(req::HTTP.Request, in\_body::Vector{User};) -> Nothing
- **createUsersWithListInput**
    - *invocation:* POST /user/createWithList
    - *signature:* createUsersWithListInput(req::HTTP.Request, in\_body::Vector{User};) -> Nothing
- **deleteUser**
    - *invocation:* DELETE /user/{username}
    - *signature:* deleteUser(req::HTTP.Request, in\_username::String;) -> Nothing
- **getUserByName**
    - *invocation:* GET /user/{username}
    - *signature:* getUserByName(req::HTTP.Request, in\_username::String;) -> User
- **loginUser**
    - *invocation:* GET /user/login
    - *signature:* loginUser(req::HTTP.Request, in\_username::String, in\_password::String;) -> String
- **logoutUser**
    - *invocation:* GET /user/logout
    - *signature:* logoutUser(req::HTTP.Request;) -> Nothing
- **updateUser**
    - *invocation:* PUT /user/{username}
    - *signature:* updateUser(req::HTTP.Request, in\_username::String, in\_body::User;) -> Nothing
"""
module PetStoreServer

using HTTP
using URIs
using Dates
using Random
using TimeZones
using OpenAPI
using OpenAPI.Servers

include("modelincludes.jl")

include("api_PetApi.jl")
include("api_StoreApi.jl")
include("api_UserApi.jl")

"""
Register handlers for all APIs in this module in the supplier Router.

Paramerets:
- `router`: Router to register handlers in
- `impl`: module that implements the server methods

Optional parameters:
- `path_prefix`: prefix to be applied to all paths
- `optional_middlewares`: Register one or more optional middlewares to be applied to all requests.

Optional middlewares can be one or more of:
    - `init`: called before the request is processed
    - `pre_validation`: called after the request is parsed but before validation
    - `pre_invoke`: called after validation but before the handler is invoked
    - `post_invoke`: called after the handler is invoked but before the response is sent

The order in which middlewares are invoked are:
`init |> read |> pre_validation |> validate |> pre_invoke |> invoke |> post_invoke`
"""
function register(router::HTTP.Router, impl; path_prefix::String="", optional_middlewares...)
    registerPetApi(router, impl; path_prefix=path_prefix, optional_middlewares...)
    registerStoreApi(router, impl; path_prefix=path_prefix, optional_middlewares...)
    registerUserApi(router, impl; path_prefix=path_prefix, optional_middlewares...)
    return router
end

export check_required

# export models
export ApiResponse
export Category
export Order
export Pet
export Tag
export User


end # module PetStoreServer
