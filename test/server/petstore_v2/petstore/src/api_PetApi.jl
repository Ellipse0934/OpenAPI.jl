# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


function addPet_read(handler)
    function addPet_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        openapi_params["body"] = OpenAPI.Servers.to_param_type(Pet, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function addPet_validate(handler)
    function addPet_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function addPet_invoke(impl; post_invoke=nothing)
    function addPet_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = try
            impl.addPet(req::HTTP.Request, openapi_params["body"];)
        catch ex
            @error("Error in addPet", exception=(ex, catch_backtrace()))
            HTTP.Response(500, "Internal Server Error")
        end
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function deletePet_read(handler)
    function deletePet_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["petId"] = OpenAPI.Servers.to_param(Int64, path_params, "petId", required=true, )
        headers = Dict{String,String}(HTTP.headers(req))
        openapi_params["api_key"] = OpenAPI.Servers.to_param(String, headers, "api_key", )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function deletePet_validate(handler)
    function deletePet_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function deletePet_invoke(impl; post_invoke=nothing)
    function deletePet_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = try
            impl.deletePet(req::HTTP.Request, openapi_params["petId"]; in_api_key=get(openapi_params, "api_key", nothing),)
        catch ex
            @error("Error in deletePet", exception=(ex, catch_backtrace()))
            HTTP.Response(500, "Internal Server Error")
        end
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function findPetsByStatus_read(handler)
    function findPetsByStatus_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["status"] = OpenAPI.Servers.to_param(Vector{String}, query_params, "status", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function findPetsByStatus_validate(handler)
    function findPetsByStatus_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function findPetsByStatus_invoke(impl; post_invoke=nothing)
    function findPetsByStatus_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = try
            impl.findPetsByStatus(req::HTTP.Request, openapi_params["status"];)
        catch ex
            @error("Error in findPetsByStatus", exception=(ex, catch_backtrace()))
            HTTP.Response(500, "Internal Server Error")
        end
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function findPetsByTags_read(handler)
    function findPetsByTags_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        query_params = HTTP.queryparams(URIs.URI(req.target))
        openapi_params["tags"] = OpenAPI.Servers.to_param(Vector{String}, query_params, "tags", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function findPetsByTags_validate(handler)
    function findPetsByTags_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function findPetsByTags_invoke(impl; post_invoke=nothing)
    function findPetsByTags_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = try
            impl.findPetsByTags(req::HTTP.Request, openapi_params["tags"];)
        catch ex
            @error("Error in findPetsByTags", exception=(ex, catch_backtrace()))
            HTTP.Response(500, "Internal Server Error")
        end
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function getPetById_read(handler)
    function getPetById_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["petId"] = OpenAPI.Servers.to_param(Int64, path_params, "petId", required=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function getPetById_validate(handler)
    function getPetById_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function getPetById_invoke(impl; post_invoke=nothing)
    function getPetById_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = try
            impl.getPetById(req::HTTP.Request, openapi_params["petId"];)
        catch ex
            @error("Error in getPetById", exception=(ex, catch_backtrace()))
            HTTP.Response(500, "Internal Server Error")
        end
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function updatePet_read(handler)
    function updatePet_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        openapi_params["body"] = OpenAPI.Servers.to_param_type(Pet, String(req.body))
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function updatePet_validate(handler)
    function updatePet_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function updatePet_invoke(impl; post_invoke=nothing)
    function updatePet_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = try
            impl.updatePet(req::HTTP.Request, openapi_params["body"];)
        catch ex
            @error("Error in updatePet", exception=(ex, catch_backtrace()))
            HTTP.Response(500, "Internal Server Error")
        end
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function updatePetWithForm_read(handler)
    function updatePetWithForm_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["petId"] = OpenAPI.Servers.to_param(Int64, path_params, "petId", required=true, )
        form_data =  HTTP.parse_multipart_form(req)
        openapi_params["name"] = OpenAPI.Servers.to_param(String, form_data, "name"; multipart=true, isfile=false, )
        openapi_params["status"] = OpenAPI.Servers.to_param(String, form_data, "status"; multipart=true, isfile=false, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function updatePetWithForm_validate(handler)
    function updatePetWithForm_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function updatePetWithForm_invoke(impl; post_invoke=nothing)
    function updatePetWithForm_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = try
            impl.updatePetWithForm(req::HTTP.Request, openapi_params["petId"]; in_name=get(openapi_params, "name", nothing), in_status=get(openapi_params, "status", nothing),)
        catch ex
            @error("Error in updatePetWithForm", exception=(ex, catch_backtrace()))
            HTTP.Response(500, "Internal Server Error")
        end
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end

function uploadFile_read(handler)
    function uploadFile_read_handler(req::HTTP.Request)
        openapi_params = Dict{String,Any}()
        path_params = HTTP.getparams(req)
        openapi_params["petId"] = OpenAPI.Servers.to_param(Int64, path_params, "petId", required=true, )
        form_data =  HTTP.parse_multipart_form(req)
        openapi_params["additionalMetadata"] = OpenAPI.Servers.to_param(String, form_data, "additionalMetadata"; multipart=true, isfile=false, )
        openapi_params["file"] = OpenAPI.Servers.to_param(String, form_data, "file"; multipart=true, isfile=true, )
        req.context[:openapi_params] = openapi_params

        return handler(req)
    end
end

function uploadFile_validate(handler)
    function uploadFile_validate_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        
        return handler(req)
    end
end

function uploadFile_invoke(impl; post_invoke=nothing)
    function uploadFile_invoke_handler(req::HTTP.Request)
        openapi_params = req.context[:openapi_params]
        ret = try
            impl.uploadFile(req::HTTP.Request, openapi_params["petId"]; in_additionalMetadata=get(openapi_params, "additionalMetadata", nothing), in_file=get(openapi_params, "file", nothing),)
        catch ex
            @error("Error in uploadFile", exception=(ex, catch_backtrace()))
            HTTP.Response(500, "Internal Server Error")
        end
        resp = OpenAPI.Servers.server_response(ret)
        return (post_invoke === nothing) ? resp : post_invoke(req, resp)
    end
end


function registerPetApi(router::HTTP.Router, impl; path_prefix::String="", optional_middlewares...)
    HTTP.register!(router, "POST", path_prefix * "/pet", OpenAPI.Servers.middleware(impl, addPet_read, addPet_validate, addPet_invoke; optional_middlewares...))
    HTTP.register!(router, "DELETE", path_prefix * "/pet/{petId}", OpenAPI.Servers.middleware(impl, deletePet_read, deletePet_validate, deletePet_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/pet/findByStatus", OpenAPI.Servers.middleware(impl, findPetsByStatus_read, findPetsByStatus_validate, findPetsByStatus_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/pet/findByTags", OpenAPI.Servers.middleware(impl, findPetsByTags_read, findPetsByTags_validate, findPetsByTags_invoke; optional_middlewares...))
    HTTP.register!(router, "GET", path_prefix * "/pet/{petId}", OpenAPI.Servers.middleware(impl, getPetById_read, getPetById_validate, getPetById_invoke; optional_middlewares...))
    HTTP.register!(router, "PUT", path_prefix * "/pet", OpenAPI.Servers.middleware(impl, updatePet_read, updatePet_validate, updatePet_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/pet/{petId}", OpenAPI.Servers.middleware(impl, updatePetWithForm_read, updatePetWithForm_validate, updatePetWithForm_invoke; optional_middlewares...))
    HTTP.register!(router, "POST", path_prefix * "/pet/{petId}/uploadImage", OpenAPI.Servers.middleware(impl, uploadFile_read, uploadFile_validate, uploadFile_invoke; optional_middlewares...))
    return router
end
